import User from '../Models/user.model.min.js'
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
import nodemailer from 'nodemailer'
import crypto from 'crypto'
import { log } from 'console';
import shortid from 'shortid';


dotenv.config();

function generateShortUrl() {
    return shortid.generate();
}

const userContoller = {
    //Home Page
    homePage: async (req, res) => {
        try {
            res.status(200).send({ message: "Welcome to Home page of Url Shortner" });
        } catch (error) {
            res.status(500).json({ message: error.message })
        }
    },

    signup: async (req, res) => {
        try {
            // get the user inputs

            const { username, password, name } = req.body;
            const user = await User.findOne({ username });
            //Checking if the user exists
            if (user) {
                return res.status(400).json({ message: "Username already found" })
            }
            //Hashing the password
            const passwordHash = await bcrypt.hash(password, 10);
            // Create a new password
            const newUser = new User({
                username, passwordHash, name
            });
            const savedUser = await newUser.save()
            // res.status(200).json({
            //     message: "Registered successfully", user: {
            //         username: savedUser.username, name: savedUser.name, activationStatus: savedUser.activationStatus
            //     }
            // })
            const userId = savedUser._id;
            console.log(userId + " is the id");
            const token = crypto.randomBytes(10).toString('hex')
            // save the random string in database
            console.log(token);
            savedUser.token = token;
            await savedUser.save()
            // Nodemailer
            try {

                const transporter = nodemailer.createTransport({
                    service: 'gmail',
                    auth: {
                        user: 'kamaleshwaranvlup@gmail.com',
                        pass: process.env.PASSWORD
                    }
                });

                // Email parameters
                const option = {
                    from: 'kamaleshwaranvlup@gmail.com',
                    to: username,
                    subject: 'Passwordreset',
                    text: `Kindly click the below link to activate your account,
                     ${process.env.baseurl}activation/${userId}/${token}`
                };

                // Sending the mail
                transporter.sendMail(option, function (error, info) {
                    if (error) {
                        res.status(400).json({ message: "Error sending the mail" })
                    }
                    else {
                        res.status(200).json({
                            message: "Registered successfully. Verification Email has been sent to your registered mail id. Check your inbox and activate your account", user: {
                    username: savedUser.username, name: savedUser.name, activationStatus: savedUser.activationStatus
                        }, info })
                    }
                })
            }
            catch (error) {
                console.error('Error in forgotPassword controller:', error);
                res.status(500).json({ message: 'Internal Server Error' });
            }



        } catch (error) {
            res.status(400).json({ message: "Error creating a user" })
        }

    },
    activation: async (req, res) => {
        const { userId, token } = req.params;
        console.log(userId + "and" + token);
        try {
            let user = await User.findOne({_id: userId, token});
            console.log(user);
            if (!user) {
                return res.status(400).json({ message: "User not found! or token has been expired!" });
            }
            else {

                if (user.activationStatus === "Inactive") {
                    await User.findByIdAndUpdate(userId, { activationStatus: "Active" }, { token: null });
                    await User.findByIdAndUpdate(userId, { token: null });
                    return res.status(200).json({ message: "Your account has been verified. Login to continue. You may close this window" })
                } else {
                    return res.status(400).json({ message: "User account has already been verified" })
                }

            }
        } catch (error) {
            res.status(500).json({ message: "Invalid URL or Token is Expired!" })
            console.log(error);
        }
    },
    signin: async (req, res) => {
        try {
            // Get the data from the user
            const { username, password } = req.body;

            const user = await User.findOne({ username });
            // Check the user available in the database
            if (!user) {
                return res.status(400).json({ message: "User not found" })
            }
            // Checking for password match
            const passwordMatch = await bcrypt.compare(password, user.passwordHash)

            if (!passwordMatch) {
                return res.status(401).json({ message: "Password is not right Check again" })
            }
            if (user.activationStatus != "Active") {
                return res.status(401).json({ message: "Your account has not been verified! Kindly check you mail for activation link to continue" })
            }
            // generate a token as they login
            const token = jwt.sign({
                username: user.username,
                id: user._id,
                name: user.name
            }, process.env.JWT_secret)
            res.cookie('token', token, {
                httpOnly: true,
                sameSite: 'strict',
                expires: new Date(Date.now() + 24 * 60 * 60 * 1000),
                secure: true,
            })
            res.json({ message: "Logged in Successfully",user, token })


        } catch (error) {
            res.status(500).json({ message: 'Server Error' })
        }
    },
    getUser: async (req, res) => {
        try {
            // getting the username
            const { username } = req.body;
            // Check the user available in the database

            const user = await User.findOne({ username });
            if (!user) {
                return res.status(400).json({ message: "No such user exists" })
            }
            res.status(200).json({ user, message: "Username verified! Enter your new password" })
        } catch (error) {
            console.log(error);
        }
    },
    forgotPassword: async (req, res, next) => {
        try {
            // getting the username

            const { username } = req.body;
            const user = await User.findOne({ username })
            // const token = await User.findOne({token})

            if (!user) {
                return res.status(400).json({ message: "No such user exists" })
            }
            else {
                // generate a random string

                const token = crypto.randomBytes(10).toString('hex')
                // save the random string in database
                console.log(token);
                user.token = token;
                await user.save()
                // Nodemailer
                const transporter = nodemailer.createTransport({
                    service: 'gmail',
                    auth: {
                        user: 'kamaleshwaranvlup@gmail.com',
                        pass: process.env.PASSWORD
                    }
                });

                // Email parameters
                const option = {
                    from: 'kamaleshwaranvlup@gmail.com',
                    to: username,
                    subject: 'Passwordreset',
                    text: `Your Url for resetting the password, 
                    ${process.env.baseurl}resetpassword/${user._id}/${user.token}`
                };

                // Sending the mail
                transporter.sendMail(option, function (error, info) {
                    if (error) {
                        res.status(400).json({ message: "Error sending the mail" })
                    }
                    else {
                        res.status(200).json({ message: 'Email has been sent. Check your inbox. Go to Login page to log back in', info })
                    }
                })
            }

        } catch (error) {
            console.error('Error in forgotPassword controller:', error);
            res.status(500).json({ message: 'Internal Server Error' });
        }
    },
    resetPassword: async (req, res, next) => {
        try {
            // Getting the userId and random string from the url as params
            const { userId, token } = req.params;
            const { password } = req.body;
            // console.log( password);
            // Checking both userId and token to find the user
            const user = await User.findOne({ _id: userId, token })
            console.log(user);
            // const token = await User.findOne({token})
            if (!user) {
                return res.status(400).json({ message: "No such user exists" })
            }

            // If userId and token matched, hash the new  password and update it in the database
            const passwordHash = await bcrypt.hash(password, 10);
            await User.findByIdAndUpdate(user._id, { passwordHash: passwordHash })
            await User.findByIdAndUpdate(user._id, { token: null })

            res.status(200).json({ message: 'Password has been reset successfully. Login again to continue' })

        } catch (error) {
            console.error('Error in sending the url', error);

            res.status(500).json({ message: 'Internal Server Error' })
        }
    },
    urlshortner: async (req, res) => {
        const { userId } = req.params;
        // console.log(userId);
        const user = await User.findOne({ _id: userId })
        // console.log(user);
        if (!user) {
            res.status(401).json({message:"Unauthorized"})
        }
            // res.status(200).json({ message: "You can create short url " })
       
            
            try {
                
                const { longurl } = req.body
                console.log(longurl);
                if (!longurl) {
                    res.status(400).json({ message: "Long URL is required" })
                }
                // log(user._id)
                // await User.findByIdAndUpdate(userId, { longUrl: longurl })
                
                const shorturl = generateShortUrl()
                // await User.findByIdAndUpdate(userId, { shortUrl:shorturl })
                const urlObject = { longUrl: longurl, shortUrl: shorturl };
                
                // Update the user's url array by pushing the new URL object
                user.url.push(urlObject);
                
                // Save the updated user document
                await user.save();
                res.status(200).json({message:'Short URL created successfully', shorturl, longurl })
                
            }
            catch (error) {
                res.status(500).json({ message: "Server Error" })
            }
        
    },
        
        
        shorturl: async (req, res) => {
        const { shortUrl } = req.params;
        console.log(shortUrl);
        const user = await User.findOne({"url.shortUrl": shortUrl })
        console.log(user);
        if (!user) {
            res.status(400).json({ message: "Long URL not found" })
        }
        const urlObject = user.url.find(url => url.shortUrl === shortUrl);

        // Extract the longUrl from the URL object
        const longUrl = urlObject.longUrl;
        console.log(longUrl);
        res.redirect(longUrl)
    },
    getShortUrlLength: async (req, res) => {
        try {
            const { userId } = req.params
            // console.log(userId);
            const url = await User.findById(userId).select("url -_id")
            // console.log(url);

            let urlLength = url.url.length
            let urls = url.url.map(url => ({ Longurl: url.longUrl, Shorturl: url.shortUrl }))
            console.log(urls);

            console.log(urlLength);

            res.status(200).json({ message: "Successfully fetched  URL count and the urls", urlLength, urls})
        } catch (error) {
        res.status(500).json({error:"Server Error"})    
        }
    },
    getCreatedUrls: async (req, res) => {
        try {
            const {userId} = req.params
            // console.log(userId);
            const user = await User.findById(userId).select("url")
            // console.log(user);
            let urls = user.url.map(url=>({Longurl: url.longUrl, Shorturl: url.shortUrl}))
            console.log(urls);
            res.status(200).json({ message: "Successfully fetched  URL count", urls })
        } catch (error) {
            res.status(500).json({ error: "Server Error" })
        }
    }

  

}

export default userContoller;